#!/usr/bin/env bash

# Usage:
#
#     $ bin/compile <build-dir> <cache-dir>


# Fail fast and fail hard.
set -eo pipefail

# Prepend proper path for virtualenv hackery. This will be deprecated soon.
export PATH=:/usr/local/bin:$PATH

# Paths.
BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
ROOT_DIR=$(dirname $BIN_DIR)
BUILD_DIR=$1
CACHE_DIR=$2

CACHED_DIRS=".heroku"

# Static configurations for virtualenv caches.
PROFILE_PATH="$BUILD_DIR/.profile.d/miniconda.sh"

# Sanitizing environment variables.
unset GIT_DIR PYTHONHOME PYTHONPATH LD_LIBRARY_PATH LIBRARY_PATH

# We'll need to send these statics to other scripts we `source`.
export BUILD_DIR CACHE_DIR BIN_DIR PROFILE_PATH

# Syntax sugar.
source $BIN_DIR/utils

# Directory Hacks for path consistiency.
APP_DIR='/app'
TMP_APP_DIR=$CACHE_DIR/tmp_app_dir

# Copy Anvil app dir to temporary storage...
mkdir -p $TMP_APP_DIR
deep-mv $APP_DIR $TMP_APP_DIR

# Copy Application code in.
deep-mv $BUILD_DIR $APP_DIR

# Set new context.
ORIG_BUILD_DIR=$BUILD_DIR
BUILD_DIR=$APP_DIR

# Prepend proper path buildpack use.
export PATH=$BUILD_DIR/.heroku/miniconda/bin:$PATH
export PYTHONUNBUFFERED=1
export LANG=en_US.UTF-8

# Switch to the repo's context.
cd $BUILD_DIR

# Experimental pre_compile hook.
source $BIN_DIR/steps/hooks/pre_compile

# ### The Cache
mkdir -p $CACHE_DIR

# Restore old artifacts from the cache.
for dir in $CACHED_DIRS; do
  cp -R $CACHE_DIR/$dir . &> /dev/null || true
done

set +e
# Create set-aside `.heroku` folder.
mkdir .heroku &> /dev/null
set -e

# Make profile.d directory.
mkdir -p $(dirname $PROFILE_PATH)

#!/usr/bin/env bash
CONDA_VERSION=3.10.1
if [ ! -d /app/.heroku/miniconda ]; then
  puts-step "Preparing Python Environment (${CONDA_VERSION})"
  curl -Os http://repo.continuum.io/miniconda/Miniconda-${CONDA_VERSION}-Linux-x86_64.sh
  bash Miniconda-${CONDA_VERSION}-Linux-x86_64.sh -p /app/.heroku/miniconda/ -b | indent
  rm -fr Miniconda-${CONDA_VERSION}-Linux-x86_64.sh

  conda update conda --quiet --yes | indent
fi


if [ -f environment.yml ]; then
  puts-step "Creating conda environment"
  # TODO: Use update if its already there
  conda env remove --yes --quiet --name heroku-env
  conda env create --name=heroku-env --file environment.yml
else
  conda create --name=heroku-env python
fi

puts-step "Installing IPython Notebook / Jupyter"
conda install --name=heroku-env --yes ipython-notebook

# Clean up the installation environment .
# TODO Determine if removing packages might be bad here
conda clean -pt --yes > /dev/null

# ### Finalize
#

# Store new artifacts in cache.
for dir in $CACHED_DIRS; do
  rm -rf $CACHE_DIR/$dir
  cp -R $dir $CACHE_DIR/
done

# Set context environment variables.
set-env PATH '$HOME/.heroku/miniconda/bin:$PATH'
PYTHONPATH='/app/.heroku/miniconda/lib/python2.7/site-packages:$PYTHONPATH'
if [ -f environment.yml ]; then
  PYTHONPATH="/app/.heroku/miniconda/envs/heroku-env/lib/python2.7/site-packages:${PYTHONPATH}"
  set-default-env CONDA_DEFAULT_ENV "heroku-env"
fi
set-default-env PYTHONPATH $PYTHONPATH
set-env PYTHONUNBUFFERED true
set-default-env LANG en_US.UTF-8
set-default-env PYTHONHASHSEED random

# Now detect Procfile and add one if not there
if test -f $build_dir/Procfile; then
  puts-step "Using Procfile"
else
  puts-step "Creating default Procfile"
  echo "web: /app/.heroku/miniconda/envs/heroku-env/bin/ipython notebook --config=/app --ip=0.0.0.0 --port=\$PORT --no-browser" > $build_dir/Procfile
fi

# ### Fin.

deep-mv $BUILD_DIR $ORIG_BUILD_DIR
deep-mv $TMP_APP_DIR $APP_DIR
